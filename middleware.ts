// middleware.js
import { NextResponse } from "next/server";

const BOT_JSON_URL = "https://raw.githubusercontent.com/arcjet/well-known-bots/main/well-known-bots.json";
const BOT_LIST_TTL = 60 * 60 * 1000; // –∫–µ—à–∏—Ä–æ–≤–∞—Ç—å 1 —á–∞—Å
const TELEGRAM_TIMEOUT_MS = 700; // —Ç–∞–π–º–∞—É—Ç –¥–ª—è –≤—ã–∑–æ–≤–∞ —Ç–µ–ª–µ–≥—Ä–∞–º–∞ –≤ middleware

// –í—Å—Ç–∞–≤—å —Å—é–¥–∞ —Ç–æ–∫–µ–Ω/—á–∞—Ç –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π env-–ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
const BOT_TOKEN = process.env.TG_BOT_TOKEN || ""; // –Ω–∞–ø—Ä–∏–º–µ—Ä '6438....'
const CHAT_ID = process.env.TG_CHAT_ID || "";     // –Ω–∞–ø—Ä–∏–º–µ—Ä '1743635369'

// –∫—ç—à –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏ (edge runtime / serverless –º–æ–∂–µ—Ç –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å)
if (!globalThis.__bot_cache) {
  globalThis.__bot_cache = { regexes: [], fetchedAt: 0, fetching: null };
}

async function loadBotRegexes() {
  const now = Date.now();
  const cache = globalThis.__bot_cache;

  // –µ—Å–ª–∏ –≤ –∫—ç—à–µ –∏ –Ω–µ —É—Å—Ç–∞—Ä–µ–ª–æ ‚Äî –≤–µ—Ä–Ω—É—Ç—å
  if (cache.regexes.length && now - cache.fetchedAt < BOT_LIST_TTL) return cache.regexes;

  // –µ—Å–ª–∏ —É–∂–µ –∏–¥—ë—Ç fetch ‚Äî –¥–æ–∂–¥–∞—Ç—å—Å—è –µ–≥–æ
  if (cache.fetching) {
    try { await cache.fetching } catch(e) {}
    return cache.regexes;
  }

  // –∑–∞–ø—É—Å–∫–∞–µ–º fetch –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–º–∏—Å –≤ cache.fetching
  cache.fetching = (async () => {
    try {
      const res = await fetch(BOT_JSON_URL, { cf: { cacheTtl: 3600 } });
      if (!res.ok) {
        console.warn("bot list fetch failed", res.status);
        cache.fetching = null;
        return cache.regexes;
      }
      const json = await res.json();

      const regexes = [];
      if (Array.isArray(json)) {
        for (const entry of json) {
          // entry –º–æ–∂–µ—Ç –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π –∏–ª–∏ –æ–±—ä–µ–∫—Ç–æ–º { pattern: "..." }
          let pattern = null;
          if (typeof entry === "string") pattern = entry;
          else if (entry && typeof entry.pattern === "string") pattern = entry.pattern;
          else if (entry && typeof entry.ua === "string") pattern = entry.ua;

          if (!pattern) continue;

          // –µ—Å–ª–∏ pattern –≤—ã–≥–ª—è–¥–∏—Ç –∫–∞–∫ /.../ —Ç–æ –≤—ã—Ä–µ–∂–µ–º / –∏ —Ñ–ª–∞–≥–∏ (–≤ —Å–ª—É—á–∞–µ)
          let rx = null;
          try {
            if (pattern.startsWith("/") && pattern.lastIndexOf("/") > 0) {
              const last = pattern.lastIndexOf("/");
              const body = pattern.slice(1, last);
              const flags = pattern.slice(last + 1);
              rx = new RegExp(body, flags.includes("i") ? flags : flags + "i");
            } else {
              // –±–µ–∑–æ–ø–∞—Å–Ω–æ —Å–æ–∑–¥–∞—ë–º RegExp (—ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º –æ–±—ã—á–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏? –Ω–æ —á–∞—Å—Ç–æ –≤ —Å–ø–∏—Å–∫–∞—Ö —É–∂–µ regex)
              // –ø–æ–ø—ã—Ç–∞–µ–º—Å—è —Å–Ω–∞—á–∞–ª–∞ –∫–∞–∫ —Ä–µ–≥—É–ª—è—Ä–∫—É, –µ—Å–ª–∏ —É–ø–∞–¥—ë—Ç ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç—É—é includes-–ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∏–∂–µ
              try {
                rx = new RegExp(pattern, "i");
              } catch (e) {
                // –µ—Å–ª–∏ –Ω–µ–≤–∞–ª–∏–¥–Ω–∞—è regex, –ø—Ä–µ–≤—Ä–∞—Ç–∏–º –≤ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É
                rx = new RegExp(pattern.replace(/[.*+?^${}()|[\]\\]/g, "\\$&"), "i");
              }
            }
          } catch (e) {
            continue;
          }
          if (rx) regexes.push(rx);
        }
      }
      cache.regexes = regexes;
      cache.fetchedAt = Date.now();
    } catch (e) {
      console.warn("Error loading bot patterns:", e?.message || e);
    } finally {
      cache.fetching = null;
    }
  })();

  await cache.fetching;
  return cache.regexes;
}

async function notifyTelegram(text, data = {}) {
  const token = BOT_TOKEN || process.env.TG_BOT_TOKEN;
  const chat = CHAT_ID || process.env.TG_CHAT_ID;
  if (!token || !chat) {
    // –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ ‚Äî –ª–æ–≥–∏–º –∏ –≤—ã—Ö–æ–¥–∏–º
    console.warn("Telegram token/chat not set");
    return;
  }

  const controller = new AbortController();
  const id = setTimeout(() => controller.abort(), TELEGRAM_TIMEOUT_MS);

  try {
    await fetch(`https://api.telegram.org/bot${token}/sendMessage`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ chat_id: chat, text }),
      signal: controller.signal,
    });
  } catch (e) {
    // –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Ç–∞–π–º–∞—É—Ç/–æ—à–∏–±–∫–∏ –≤ middleware
    console.warn("Telegram notify failed (ignored)", e?.message || e);
  } finally {
    clearTimeout(id);
  }
}

export async function middleware(req) {
  const ua = req.headers.get("user-agent") || "";

  const isHumanLike = ua.includes("Mozilla");
  
  const url = req.nextUrl.pathname + (req.nextUrl.search || "");
  const ip = req.headers.get("x-forwarded-for") || req.headers.get("cf-connecting-ip") || "unknown";

  // –ø—É—Å—Ç–æ–π —é–∞ ‚Äî —Å—Ä–∞–∑—É —Å—á–∏—Ç–∞–µ–º –±–æ—Ç–æ–º
  if (!isHumanLike) {
    // —à–ª—ë–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (–Ω–µ –∂–¥—ë–º –¥–æ–ª–≥–æ)
    notifyTelegram(`üö® –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π UA: ${ua}\nIP: ${ip}\nURL: ${url}`);
    return NextResponse.redirect("https://google.com");
  }

  // –∑–∞–≥—Ä—É–∂–∞–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã (–∏–∑ –∫—ç—à–∞ –∏–ª–∏ —Å–µ—Ç–∏)
  let regexes = [];
  try {
    regexes = await loadBotRegexes();
  } catch (e) {
    console.warn("loadBotRegexes failed", e?.message || e);
  }

  // –±—ã—Å—Ç—Ä–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ regexp
  const isBot = regexes.some(rx => {
    try { return rx.test(ua); } catch (e) { return false; }
  });

  if (isBot) {
    // —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏ —Ä–µ–¥–∏—Ä–µ–∫—Ç
    notifyTelegram(`üö® Known bot detected\nUA: ${ua}\nIP: ${ip}\nURL: ${url}`);
    return NextResponse.redirect("https://google.com");
  }
  return NextResponse.next();
  //return NextResponse.redirect("https://pqnjj.bestafair.com/?utm_source=da57dc555e50572d&ban=tg&j1=1&s1=4533&s2=2163253");
  
  // –Ω–µ –±–æ—Ç ‚Äî –ø—É—Å–∫–∞–µ–º –¥–∞–ª—å—à–µ
  //return NextResponse.next();
}

// –ø—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞ –≤—Å–µ —Ä–æ—É—Ç—ã
export const config = { matcher: ["/:path*"] };
